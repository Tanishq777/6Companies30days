Q - You are given an integer array nums of length n.
Assume arrk to be an array obtained by rotating nums by k positions clock-wise. We define the rotation function F on nums as follow:
F(k) = 0 * arrk[0] + 1 * arrk[1] + ... + (n - 1) * arrk[n - 1].
Return the maximum value of F(0), F(1), ..., F(n-1).
The test cases are generated so that the answer fits in a 32-bit integer.
Link - https://leetcode.com/problems/rotate-function/description/

Code - Java
class Solution {
    public int maxRotateFunction(int[] nums) {
        int n = nums.length;
        int sum = 0;
        int fk = 0, fk_1 = 0;  
        int ans = Integer.MIN_VALUE;
        if (n<=1) return 0;
        for(int i=0;i<n;i++)
        {
            sum += nums[i];
            fk_1 += i*nums[i];
        }
        for(int i=n-1;i>=0;i--)
        {
            fk = fk_1 + sum - n*nums[i];
            ans = Math.max(ans,fk);
            fk_1 = fk;
        }
        return ans;
    }
}

Idea - Find the Pattern in this problem, that any F(k) = F(k-1) + SumOfArray - (SizeOfArray)*(LastElement--); , Once Found it is Just 1D DP, 
O(n) time and O(1) Space.
Topic - 1d DP
